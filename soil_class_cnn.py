# -*- coding: utf-8 -*-
"""soil_class_cnn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G6iGcuzaeoANcAdcj-vJlevHIIbA7uWZ
"""

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/MyDrive/data/Dataset/Train"
print("Path to dataset files:", path)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator


img_height, img_width = 150, 150
batch_size = 32


datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

train_data = datagen.flow_from_directory(
    path,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

val_data = datagen.flow_from_directory(
    path,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization

model = Sequential([

    Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)),
    BatchNormalization(),
    MaxPooling2D(2, 2),


    Conv2D(64, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(2, 2),


    Conv2D(128, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(2, 2),


    Conv2D(256, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(2, 2),


    Conv2D(512, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(2, 2),

    Flatten(),


    Dense(256, activation='relu'),
    Dropout(0.5),


    Dense(train_data.num_classes, activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=10
)

import matplotlib.pyplot as plt



train_acc = history.history['accuracy'][-1]
val_acc = history.history['val_accuracy'][-1]

print(f"Final Training Accuracy: {train_acc:.4f}")
print(f"Final Validation Accuracy: {val_acc:.4f}")


epochs = range(1, len(history.history['accuracy']) + 1)

plt.figure(figsize=(12, 5))


plt.subplot(1, 2, 1)
plt.plot(epochs, history.history['accuracy'], 'bo-', label='Training Accuracy')
plt.plot(epochs, history.history['val_accuracy'], 'ro-', label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()


plt.subplot(1, 2, 2)
plt.plot(epochs, history.history['loss'], 'bo-', label='Training Loss')
plt.plot(epochs, history.history['val_loss'], 'ro-', label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()

model.save("soil_type_classifier.h5")

!pip install ipywidgets --quiet


import tensorflow as tf
from tensorflow.keras.preprocessing import image
import numpy as np
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML
import os


img_height, img_width = 150, 150
model_path = "soil_type_classifier.h5"


model = tf.keras.models.load_model(model_path)


class_indices = {'alluvial': 0, 'black': 1, 'clay': 2, 'red': 3}
idx_to_class = {v: k for k, v in class_indices.items()}

soil_to_crops = {
    'alluvial': ['Rice', 'Wheat', 'Sugarcane', 'Maize'],
    'black': ['Cotton', 'Sorghum', 'Millets', 'Pulses'],
    'clay': ['Rice', 'Wheat', 'Sugarcane', 'Millets'],
    'red': ['Millets', 'Pulses', 'Groundnut', 'Cotton']
}


crop_details = {
    'Rice': {
        'Growing Season': 'June to November',
        'Water Requirement': 'High (Flood irrigation preferred)',
        'Other Requirements': 'Warm temperature, fertile soil'
    },
    'Wheat': {
        'Growing Season': 'October to March',
        'Water Requirement': 'Moderate',
        'Other Requirements': 'Cool climate, well-drained soil'
    },
    'Sugarcane': {
        'Growing Season': 'February to November',
        'Water Requirement': 'High',
        'Other Requirements': 'Fertile soil, warm climate'
    },
    'Maize': {
        'Growing Season': 'March to July',
        'Water Requirement': 'Moderate',
        'Other Requirements': 'Well-drained fertile soil'
    },
    'Cotton': {
        'Growing Season': 'April to September',
        'Water Requirement': 'Moderate',
        'Other Requirements': 'Warm climate, deep fertile soil'
    },
    'Sorghum': {
        'Growing Season': 'June to September',
        'Water Requirement': 'Low to Moderate',
        'Other Requirements': 'Drought tolerant, well-drained soil'
    },
    'Millets': {
        'Growing Season': 'June to September',
        'Water Requirement': 'Low to Moderate',
        'Other Requirements': 'Drought resistant, well-drained soil'
    },
    'Pulses': {
        'Growing Season': 'Varies (mostly Kharif and Rabi seasons)',
        'Water Requirement': 'Low to Moderate',
        'Other Requirements': 'Well-drained soil, moderate temperature'
    },
    'Groundnut': {
        'Growing Season': 'May to September',
        'Water Requirement': 'Moderate',
        'Other Requirements': 'Sandy loam soil, warm climate'
    }
}


def predict_image(img_path):
    img = image.load_img(img_path, target_size=(img_height, img_width))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    predicted_class_index = np.argmax(prediction)
    predicted_label = idx_to_class.get(predicted_class_index, "Unknown")
    crops = soil_to_crops.get(predicted_label.lower(), ['No crop data available'])

    return predicted_label, crops


upload_btn = widgets.FileUpload(accept='.jpg,.jpeg,.png', multiple=False)
predict_btn = widgets.Button(description='Predict Soil Type', button_style='success')
output = widgets.Output()

image_path = ""

def on_upload_change(change):
    global image_path
    output.clear_output()
    for name, file_info in upload_btn.value.items():
        with open(name, 'wb') as f:
            f.write(file_info['content'])
        image_path = name
        with output:
            print(f"üì∑ Uploaded: {name}")

def on_predict_click(b):
    output.clear_output()
    if not image_path:
        with output:
            print("‚ö†Ô∏è Please upload an image first.")
        return

    predicted_label, crops = predict_image(image_path)

    with output:

        display(HTML(f"<h2 style='color: green;'>‚úÖ Predicted Soil Type: <u>{predicted_label.capitalize()}</u></h2>"))
        display(HTML("<h3 style='color: darkblue;'>üå± Recommended Crops for this soil type:</h3>"))


        for crop in crops:
            details = crop_details.get(crop, None)
            if details:
                crop_info_html = f"""
                <div style='
                    border: 2px solid #4CAF50;
                    border-radius: 8px;
                    padding: 10px;
                    margin-bottom: 10px;
                    background-color: #e8f5e9;
                    box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
                '>
                    <h4 style='color: #2e7d32; margin-bottom: 5px;'>{crop}</h4>
                    <p style='color: blue;'><b>Growing Season:</b> {details.get('Growing Season', 'N/A')}</p>
                    <p style='color: blue;'><b>Water Requirement:</b> {details.get('Water Requirement', 'N/A')}</p>
                    <p style='color: blue;'><b>Other Requirements:</b> {details.get('Other Requirements', 'N/A')}</p>
                </div>
                """
            else:
                crop_info_html = f"""
                <div style='
                    border: 2px solid #f44336;
                    border-radius: 8px;
                    padding: 10px;
                    margin-bottom: 10px;
                    background-color: #ffebee;
                '>
                    <h4 style='color: #b71c1c;'>{crop}</h4>
                    <p>Details not available.</p>
                </div>
                """
            display(HTML(crop_info_html))


upload_btn.observe(on_upload_change, names='value')
predict_btn.on_click(on_predict_click)


display(widgets.HTML("<h3>üåç Soil Type Classifier & Crop Recommendation with Details</h3>"))
display(upload_btn, predict_btn, output)